# rate limit definition
# https://docs.nginx.com/nginx/admin-guide/security-controls/controlling-access-proxied-http/
# $1: 制限を行うためのキー情報
#   取りうる値
#     $binary_remote_addr: IPアドレス
#     $remote_addr: IPアドレス
#     $server_name: ホスト名
#     $http_user_agent: ユーザーエージェント
#     $http_referer: リファラ
#     $http_cookie: クッキー
#     $request_uri: リクエストURI
#     $http_{HEADER_NAME}: リクエストヘッダ（任意のヘッダ名。ハイフンはアンダーバーにしてもOK。）
#     $scheme: http or https （全体に制限をかけるなら実はこれが一番シンプル？）
#     
# $2: 共有メモリのゾーン名とゾーンのサイズ
#   メモリのサイズはキー情報の保持容量によって決める、リクエスト全体のサイズではない
# $3: 制限するレート（r/s or r/m）
#   通常はr/s。1r/s未満が望ましい場合、r/m を使う。
#limit_req_zone $http_x-custom-header zone=one:10m rate=1r/s;
#limit_req_zone $http_x_custom_header zone=one:10m rate=1r/s;
limit_req_zone $binary_remote_addr zone=one:10m rate=10r/s;

server {
    listen       8080;
    server_name  localhost;

    ### ログ
    #access_log  /var/log/nginx/host.access.log  main; # localに出力する場合
    access_log /dev/stdout json; # コンテナ用にJSONで標準出力
    error_log  /dev/stderr warn;

    ### タイムアウト
    proxy_connect_timeout 60; #TCPのハンドシェイクのタイムアウト; default 60(s)
    proxy_send_timeout 60; #リクエストが届かない時のタイムアウト; default 60(s)
    proxy_read_timeout 1; #レスポンスが返らない時のタイムアウト ; default 60(s)

    ### ヘルスチェックエンドポイント
    location /healthcheck {
        add_header Content-Type text/plain;
        access_log off;
        return 200 "ok";
    }

    ### 通常エンドポイント
    location / {
        ### リバースプロキシ設定
        #proxy_set_header Host $host; #転送先がHostヘッダをチェックしている場合、ここはコメントアウトする
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Some-Custom-Header "${SOME_CUSTOM_HEADER}"; #docker-compose.yml参照、envsubstとの組み合わせが必要

        ### rate limit 設定
        # 適用するゾーン名、burst、nodelayを指定
        # burst は、制限を超えたリクエストをキューイングする数、burstなしの場合rateを超えたリクエストは全てエラー
        # nodelay は、burstをすぐに処理するかどうか、ただし、burstはrateのペースで解放される
        limit_req zone=one burst=5 nodelay;
        limit_req_status 429;      # 制限時のレスポンスコード
        limit_req_log_level error; # 制限時のログのログレベル、遅延のログはこれより１つ下のレベルになる

        proxy_pass ${ENDPOINT};
    }
}
